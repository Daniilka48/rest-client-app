import { ReactNode } from 'react';
import { render, screen } from '@testing-library/react';
import { metadata } from './layout';

jest.mock('./ClientProviderWrapper', () => {
  const MockWrapper = ({ children }: { children: ReactNode }) => (
    <>{children}</>
  );
  return { __esModule: true, default: MockWrapper };
});

const MockRootLayout = ({
  children,
  params,
}: {
  children: ReactNode;
  params: { locale: string };
}) => (
  <div data-testid="layout" data-lang={params.locale}>
    {children}
  </div>
);

describe('RootLayout', () => {
  it('renders children correctly', () => {
    render(
      <MockRootLayout params={{ locale: 'en' }}>
        <div data-testid="child">Hello</div>
      </MockRootLayout>
    );

    expect(screen.getByTestId('child')).toHaveTextContent('Hello');
  });

  it('sets the correct lang attribute', () => {
    render(
      <MockRootLayout params={{ locale: 'fr' }}>
        <div>Test</div>
      </MockRootLayout>
    );

    const layoutDiv = screen.getByTestId('layout');
    expect(layoutDiv.dataset.lang).toBe('fr');
  });

  it('includes metadata', () => {
    expect(metadata.title).toBe('REST Client');
    expect(metadata.description).toBe('Generated by create next app');

    const icons = metadata.icons as { icon?: string };
    expect(icons.icon).toBe('/fav.ico');
  });
});
